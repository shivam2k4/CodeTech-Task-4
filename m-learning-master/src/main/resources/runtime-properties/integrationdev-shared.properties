# These settings override and append settings in:

# common-shared.properties

# Please see common-shared.properties for more information on how the properties files work


# These settings override and append settings in:

# common-shared.properties

# Please see common-shared.properties for more information on how the properties files work
    
# Allows us to load demo images from the classpath.   This would be an expensive approach
# for most implementations and should only be done in dev.   Images should be on a 
# shared file system or the DB when in non-development environments
asset.server.file.classpath.directory=/cms/static

# Because we are blanking the value out here, broadleaf will use System.setProperty("java.io.tmpdir")
# This would NOT make sense in non-development environments since the OS may delete files in that
# directory.
# 
# In non-development environments, this defaults to "/broadleaf/assets".
asset.server.file.system.path=/home/atec/products/data

                                    
blPU.hibernate.hbm2ddl.auto=none
blCMSStorage.hibernate.hbm2ddl.auto=none
blSecurePU.hibernate.hbm2ddl.auto=none

# Cache page templates for just 2 seconds in development (allows for caching during a single request)
cache.page.templates.ttl=2000
messages.cacheSeconds=2
cache.entity.dao.metadata.ttl=2000
thymeleaf.view.resolver.cache=false

# Note that when bundle.enabled is normally set to false in development as changes to 
# file based resources (like CSS and JS) will not be picked up until the server is restarted 
# if this setting is true   
bundle.enabled=true

# Don't version resources in development.   If this property is true then changes to resources
# on the file-system will require a server restart to be picked up.
# 
# Used by blc:bundle and blc:resource tags to better support client-side browser
# caching (see the "staticResourceBrowserCacheSeconds" property below). 
resource.versioning.enabled=true

# When true, allows the BroadleafCachingResourceResolver to cache resources
# Don't cache resources or transformations in development
resource.transformer.caching.enabled=true
resource.caching.enabled=true

# Don't add cache headers to static resources in development as it makes debugging too difficult
#  
# This property represents the number of seconds to add to static file cache headers.    This property is used
# in the "demo" applicationContext.xml to set the cache-seconds property for 
# HTTPResourceHandlers    
# See org.springframework.web.servlet.resource.ResourceHttpRequestHandler
staticResourceBrowserCacheSeconds=0

# Don't minify static resources (JS and CSS) in dev as it makes debugging to difficult
minify.enabled=true



# Comment out the solr.source.* above and use the following 
# if using non-embedded Solr
solr.source.primary=solrServer
solr.source.reindex=solrReindexServer
#solr.source.admin=solrAdminServer
solr.url.primary=localhost:2181,localhost:2182,localhost:2183
solr.url.reindex=localhost:2181,localhost:2182,localhost:2183

solr.index.start.delay=5000
solr.index.repeat.interval=3600000


site.baseurl=http://86.249.151.231